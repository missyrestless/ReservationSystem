// Payment - pay object module of the Truth & Beauty Lab Reservation System
// Version 1.3
//
// Copyright (c) 2011 Missy Restless
// All rights reserved
//
// Created 25-Feb-2011 by Missy Restless
//
// Modified 02-Mar-2011 by Missy Restless - disable timer when money paid
//

list Dests = [ "Kazenojin", "Bretton", "Kotora" ];
list Prices = [ "1000", "750", "1250" ];
integer dialog_handle = 0;
integer price = 0;
integer defprice = 1000;
integer refund = 0;
integer debit = 0;
key owner;
key user_key = NULL_KEY;
string Dest = "";
string Day = "";
string Time = "";
string email_address = "";
string _RESTART = "Click the reservation board again to restart your session.";

string  _DialogMessage;
integer _DialogChannel;
list    _DialogOptions;

default {
    state_entry() {
        owner = llGetOwner();
        llSetPayPrice(PAY_HIDE, [PAY_HIDE ,PAY_HIDE, PAY_HIDE, PAY_HIDE]);
        llRequestPermissions(owner, PERMISSION_DEBIT );
    }

    listen(integer channel, string name, key id, string message)
    {
        if ( channel == _DialogChannel ) {
            if (message == "OK") {
                if (dialog_handle)
                    llListenRemove(dialog_handle);
                dialog_handle = 0;
            }
        }
    }

    link_message(integer sender, integer num, string message, key trigger)
    {
        if (num == 700) {
            Dests = llParseString2List(message, [","], []);
        }
        else if (num == 701) {
            Prices = llParseString2List(message, [","], []);
        }
        else if (num == 702) {
            defprice = (integer)message;
        }
        else if (num == 703) {
            refund = (integer)message;
        }
        else if (num == 704) {
            email_address = message;
        }
        else if (num == 705) {
            user_key = trigger;
        }
        else if (num == 706) {
            Dest = message;
        }
        else if (num == 707) {
            Day = message;
        }
        else if (num == 708) {
            Time = message;
        }
        else if (num == 777) {
            integer dest_pos = llListFindList(Dests, [Dest]);
            if (~dest_pos) {
                price = (integer)llList2String(Prices, dest_pos);
            }
            else
                price = defprice;
            llSetPayPrice(price, [price, PAY_HIDE, PAY_HIDE, PAY_HIDE]);
            if (dialog_handle)
                llListenRemove(dialog_handle);
            dialog_handle = 0;
            _DialogChannel = -1000000000 - (integer)llFrand(999999999);
            dialog_handle = llListen(_DialogChannel, "", NULL_KEY, "");
            _DialogMessage = "Pay the reservation board L$" + (string)price +
                             " to secure your reservation.\n\n" +
                             "(Right click the board and select 'Pay')";
            if (refund && debit)
                _DialogMessage = _DialogMessage + "\nYour payment will be refunded by this demonstration reservation board.";
            _DialogOptions = [ "OK" ];
            llDialog(user_key, _DialogMessage, _DialogOptions, _DialogChannel );
            llInstantMessage(user_key, _DialogMessage);
            llSetTimerEvent(240.0);
        }
    }

    money (key id, integer amount) {
        llSetTimerEvent(0.0);
        if (amount < price) {
            if (debit) {
                _DialogMessage = "Sorry, but the price is " + (string)price +
                    ". The full amount is required to book your reservation. " +
                    _RESTART;
            }
            else {
                _DialogMessage = "Sorry, but the price is " + (string)price +
                    ". The full amount is required to book your reservation. " +
                    "Pay the reservation board L$" + (string)(price - amount) +
                    " to secure your reservation.";
                price = price - amount;
                llSetTimerEvent(240.0);
            }
            _DialogOptions = [ "OK" ];
            llDialog(id, _DialogMessage, _DialogOptions, _DialogChannel );
            llInstantMessage(id, _DialogMessage);
            if (debit) {
                llGiveMoney(id, amount);
                llMessageLinked(LINK_THIS, 800, "Underpayment with debit", id);
            }
            return;
        }
        else if (amount > price) {
            if (debit) {
                _DialogMessage = "This cost to book this reservation is only " +
                             (string)price + "! Refunding you L$" +
                             (string)(amount - price);
                _DialogOptions = [ "OK" ];
                llDialog(id, _DialogMessage, _DialogOptions, _DialogChannel );
                llInstantMessage(id, _DialogMessage);
                llGiveMoney(id, amount - price);
            }
        }
        if (refund && debit)
            llGiveMoney(id, price);
        string requester = llKey2Name(id);
        _DialogMessage = "You have purchased a reservation to " + Dest +
                       " on " + Day + " at " + Time +
                       " You will receive a confirmation message with details.";
        if (refund && debit)
            _DialogMessage = _DialogMessage + "\nThis demonstration reservation board has refunded your reservation price. You can purchase the Reservation System on the Second Life Marketplace at https://marketplace.secondlife.com/p/Reservation-System/1976778";
        _DialogOptions = [ "OK" ];
        llDialog(id, _DialogMessage, _DialogOptions, _DialogChannel );
        llInstantMessage(id, _DialogMessage);
        string msg = requester + " has purchased a reservation to " + Dest
                     + " on " + Day + " at " + Time;
        llInstantMessage(owner, msg);
        if (email_address) {
            if (refund && debit)
                llEmail(email_address,
                        "Demonstration reservation purchase from " +
                        requester, msg);
            else
                llEmail(email_address, "Reservation purchase from " +
                        requester, msg);
        }
        llMessageLinked(LINK_THIS, 888, "Booked", id);
    }

    run_time_permissions(integer perm)
    {
        if (perm & PERMISSION_DEBIT)
            debit = 1;
        else
            debit = 0;
    }

    timer() {
        llInstantMessage(user_key, "Payment window timed out. " + _RESTART);
        llMessageLinked(LINK_THIS, 999, "Timed Out", "");
        llSetTimerEvent(0.0);
    }
}
